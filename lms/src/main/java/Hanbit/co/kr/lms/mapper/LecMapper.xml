<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Hanbit.co.kr.lms.mapper.LecMapper">
	
	<!-- 강의계획서 삭제 -->
	<delete id="getDeleteLecPlan" parameterType="String">
		DELETE 
		FROM lec_plan
		WHERE lecture_name = #{lectureName}
	</delete>
	
	<!-- 강의계획 수정(강사 변경) -->
	<update id="getUpdateLecPlan" parameterType="Hanbit.co.kr.lms.vo.LecPlan">
		UPDATE lec_plan SET 
			 teacher_id = #{teacherId}
			,update_date = NOW()
		WHERE lecture_name = #{lectureName}
	</update>
	
	<!-- 강의계획 상태 수정(승인/비승인) -->
	<update id="getUpdateLecState" parameterType="Hanbit.co.kr.lms.vo.LecPlan">
		UPDATE lec_plan SET 
			 lec_state = #{lecState}
			,update_date = NOW()
		WHERE lecture_name = #{lectureName}
	</update>
	
	
	<!-- 강의계획 등록 -->
	<insert id="insertLecPlan" parameterType="Hanbit.co.kr.lms.vo.LecPlan">
		INSERT INTO lec_plan (
			 lecture_name
			,teacher_id
			,lec_state
			,create_date
			,update_date
		) VALUES(
			 #{lectureName}
			,#{teacherId}
			,'F'
			,NOW()
			,NOW()
		)
	</insert>
	
	<!-- 일정표 삭제 -->
	<delete id="getDeleteTime" parameterType="String">
		DELETE
		FROM time_table
		WHERE lecture_name=#{lectureName}
	</delete>
	
	<!-- 일정표 수정 -->
	<update id="getUpdateTime" parameterType="Hanbit.co.kr.lms.vo.TimeTable" >
		UPDATE time_table SET
			  start_time = #{startTime}
			, end_time = #{endTime} 
			, lunch_time = #{lunchTime}
			, begin_class = #{beginClass}
			, end_class = #{endClass}
			, update_date = NOW()
		WHERE lecture_name = #{lectureName}
	</update>
	
	<!-- 일정표 등록 -->
	<insert id="insertTimeTable" parameterType="Hanbit.co.kr.lms.vo.TimeTable">
		INSERT INTO time_table (
			 lecture_name
			,start_time
			,end_time
			,lunch_time
			,begin_class
			,end_class
			,create_date
			,update_date
		) VALUES(
			 #{lectureName}
			,#{startTime}
			,#{endTime}
			,#{lunchTime}
			,#{beginClass}
			,#{endClass}
			,NOW()
			,NOW()
		)
	</insert>
	
	<!-- 강의 삭제 -->
	<delete id="getDeleteLec" parameterType="String">
		DELETE
		FROM lec
		WHERE lecture_name = #{lectureName}
	</delete>
	
	<!-- 강의 수정 -->
	<update id="getUpdateLec" parameterType="Hanbit.co.kr.lms.vo.Lec">
			UPDATE lec SET
				 lecture_room_name = #{lectureRoomName} 
				,manager_id = #{managerId}
				,subject_name = #{subjectName}
				,registration_number = #{registrationNumber}
				,registration_pass_score = #{registrationPassScore}
				,difficulty = #{difficulty}
				,lec_cost = #{lecCost}
				,lec_phone = #{lecPhone}
				,update_date = NOW()
			WHERE lecture_name = #{lectureName}
	</update>
	
	<!-- 강의 상세보기 -->
	<select id="getLecOne" parameterType="String" resultType="Hanbit.co.kr.lms.vo.Lec">
		SELECT 
			 l.lecture_name lectureName
			,l.lecture_room_name lectureRoomName
			,l.subject_name subjectName
			,l.registration_number registrationNumber
			,l.registration_pass_score registrationPassScore
			,l.lec_cost lecCost
			,l.lec_phone lecPhone
			,l.difficulty
			,l.create_date createDate
			,tt.begin_class beginClass
			,tt.end_class endClass
			,tt.start_time startTime
			,tt.end_time endTime
			,tt.lunch_time lunchTime
			,t.teacher_id teacherId
			,t.teacher_name teacherName
			,lp.lec_state lecState
		FROM lec l
			INNER JOIN time_table tt
				ON l.lecture_name = tt.lecture_name
			INNER JOIN lec_plan lp
				ON l.lecture_name = lp.lecture_name
			INNER JOIN teacher t
				ON lp.teacher_id = t.teacher_id
		WHERE l.lecture_name = #{lectureName}
		ORDER BY tt.begin_class DESC
	</select>
	
	<!-- 강의 등록 -->
	<insert id="insertLec" parameterType="Hanbit.co.kr.lms.vo.Lec">
		INSERT INTO lec (
			 lecture_name
			,lecture_room_name
			,manager_id
			,subject_name
			,registration_number
			,registration_pass_score
			,difficulty
			,lec_cost
			,lec_phone
			,create_date
			,update_date
		) VALUES(
			 #{lectureName}
			,#{lectureRoomName}
			,#{managerId}
			,#{subjectName}
			,#{registrationNumber}
			,#{registrationPassScore}
			,#{difficulty}
			,#{lecCost}
			,#{lecPhone}
			,NOW()
			,NOW()
		)
	</insert>
	
	<!-- 재직 강사 정보 -->
	<select id="teacherList" resultType="Hanbit.co.kr.lms.vo.Teacher">
		SELECT 
			 teacher_id teacherId
			,teacher_name teacherName
		FROM teacher t
			INNER JOIN member m
			ON t.teacher_id = m.member_id
		WHERE m.member_state = '2'
	</select>
	
	<!-- 과목 정보 -->
	<select id="subjectList" resultType="Hanbit.co.kr.lms.vo.Subject">
		SELECT 
			subject_name subjectName
			,subject_subscription subjectSubscription
			,create_date createDate
		FROM subject
	</select>
	
	<!-- 강의별 강의계획서 정보 -->
	<select id="lecPlan" resultType="Hanbit.co.kr.lms.vo.LecPlan">
		SELECT
			 lp.lecture_name lectureName
			 lp.teacher_id teacherId
			,lp.lec_state lecState
			,lp.create_date createDate
		FROM lec_plan lp
			INNER JOIN lec l
				ON l.lecture_name = lp.lecture_name
		GROUP BY l.lecture_name
	</select>
	
	<!-- 강의계획서 정보 -->
	<select id="lecPlanList" resultType="Hanbit.co.kr.lms.vo.LecPlan">
		SELECT
			 lp.teacher_id teacherId
			,lp.lec_state lecState
			,lp.create_date createDate
		FROM lec_plan lp
	</select>
	
	<!-- 강의실 정보 -->
	<select id="lectureRoomList" resultType="Hanbit.co.kr.lms.vo.LectureRoom">
		SELECT 
			 lecture_room_name lectureRoomName
			,lecture_room_addr1 lectureRoomAddr1
			,lecture_room_addr2 lectureRoomAddr2
			,lecture_room_number lectureRoomNumber
			,create_date createDate
		FROM lecture_room
	</select>
	
	<!-- 강의 수 -->
	<select id="totalCount" resultType="int">
		<![CDATA[
			SELECT COUNT(*) cnt
			FROM lec l
				INNER JOIN time_table tt
				ON l.lecture_name = tt.lecture_name
			WHERE NOW() < tt.begin_class
		]]>
	</select>
	
	<!-- 개강중인 강의 수 -->
	<select id="totalOpenLecCount" resultType="int">
		<![CDATA[
			SELECT COUNT(*) cnt
			FROM lec l
				INNER JOIN time_table tt
				ON l.lecture_name = tt.lecture_name
			WHERE NOW() >= tt.begin_class AND NOW() <= tt.end_class
		]]>
	</select>
	
	<!-- 개강중인 강의 리스트 -->
	<select id="openLecListByPage" parameterType="java.util.Map" resultType="Hanbit.co.kr.lms.vo.Lec">
		<![CDATA[
			SELECT 
				 l.lecture_name lectureName
				,l.subject_name subjectName
				,l.registration_number registrationNumber
				,l.difficulty
				,l.create_date createDate
				,tt.begin_class beginClass
				,tt.end_class endClass
				,COUNT(re.student_id) registrationCount
			FROM lec l
				INNER JOIN time_table tt
				ON l.lecture_name = tt.lecture_name
				INNER JOIN lec_plan lp
				ON l.lecture_name = lp.lecture_name
				INNER JOIN registration re
				ON l.lecture_name = re.lecture_name
			WHERE NOW() >= tt.begin_class AND NOW() <= tt.end_class AND lp.lec_state='T'
			GROUP BY l.lecture_name
			ORDER BY tt.begin_class DESC
			LIMIT #{beginRow}, #{rowPerPage}
		]]>
	</select>
	
	<!-- 개강일 이전 강의 리스트 -->
	<select id="getLecListByPage" parameterType="java.util.Map" resultType="Hanbit.co.kr.lms.vo.Lec">
		<![CDATA[
			SELECT 
				 l.lecture_name lectureName
				,l.subject_name subjectName
				,l.registration_number registrationNumber
				,l.difficulty
				,l.create_date createDate
				,tt.begin_class beginClass
			FROM lec l
				INNER JOIN time_table tt
				ON l.lecture_name = tt.lecture_name
				INNER JOIN lec_plan lp
				ON l.lecture_name = lp.lecture_name
			WHERE NOW() < tt.begin_class AND lp.lec_state='T'
			ORDER BY tt.begin_class DESC
			LIMIT #{beginRow}, #{rowPerPage}
		]]>
	</select>
	
	<select id="selectLecStudentList" parameterType="String" resultType="java.util.Map">
		SELECT s.student_id studentId
			, s.student_phone studentPhone
			, s.student_email studentEmail
			, s.student_birth studentBirth
			, s.student_name studentName
		FROM registration r INNER JOIN student s
		ON r.student_id = s.student_id
		WHERE r.lecture_name = #{lectureName}
		ORDER BY s.student_name ASC;
	</select>
</mapper>